{"version":3,"file":"src_app_pages_editarperfil_editarperfil_module_ts.js","mappings":"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","sources":["./src/app/pages/editarperfil/editarperfil-routing.module.ts","./src/app/pages/editarperfil/editarperfil.module.ts","./src/app/pages/editarperfil/editarperfil.page.ts"],"sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { EditarperfilPage } from './editarperfil.page';\n\nconst routes: Routes = [\n  {\n    path: '',\n    component: EditarperfilPage\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule],\n})\nexport class EditarperfilPageRoutingModule {}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {ReactiveFormsModule, FormsModule, FormBuilder } from '@angular/forms';\n\nimport { IonicModule } from '@ionic/angular';\n\nimport { EditarperfilPageRoutingModule } from './editarperfil-routing.module';\n\nimport { EditarperfilPage } from './editarperfil.page';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    IonicModule,\n    EditarperfilPageRoutingModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  declarations: [EditarperfilPage]\n})\nexport class EditarperfilPageModule {}\n","import { Component, OnInit } from '@angular/core';\nimport { FormGroup, FormBuilder, Validators, FormControl } from '@angular/forms';\nimport { NavController } from '@ionic/angular';\nimport { UsuarioService } from 'src/app/services/usuario.service';\nimport { HerramientasUIService } from '../../services/herramientas-ui.service';\nimport { Storage } from '@ionic/storage';\nimport { CrudContactosService } from 'src/app/services/crud-contactos.service';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\n\n\n\n\nconst urlService = environment.urlServices;\n\n\n\nexport interface usuario {\n  id:string,\n  cedula:string,\n  nombre:string,\n  apellido:string,\n  telefono:string,\n  direccion:string,\n  correo:string,\n  password:string\n}\n\n@Component({\n  selector: 'app-editarperfil',\n  templateUrl: './editarperfil.page.html',\n  styleUrls: ['./editarperfil.page.scss'],\n})\nexport class EditarperfilPage implements OnInit {\n\n  validador: FormGroup;\n  datosCargarUsuario;\n  private _storage: Storage | null = null;\n  id_usuario;\n\n  //Interfaz para cargar el usuario:\n  \n\n  //esto es para no tener que ingresar usuario y contraseña mientras estemos en pruebas\n  //creamos un objeto para guardar los valores default y luego con ngModel los dejamos como default\n  datosRegistro = {\n    correo: '',\n    cedula: '',\n    nombres: '',\n    apellidos: '',\n    direccion: '',\n    telefono: '',\n    password: '',\n    password2: '',\n    id_usuario: ''\n  }\n\n  mensajesValidacion = {\n    correo: [\n      { type: \"required\", message: \"Por favor ingrese su correo\" },\n      { type: \"pattern\", message: \"Este correo no es válido\" }\n    ],\n    cedula: [\n      { type: \"required\", message: \"Por favor ingrese su correo\" },\n      { type: \"minlength\", message: \"Esta cédula no es válida\" }\n    ],\n    nombres: [\n      { type: \"required\", message: \"Por favor ingrese su nombre\" },\n      { type: \"minlength\", message: \"Este nombre no es válido\" }\n    ],\n    apellidos: [\n      { type: \"required\", message: \"Por favor ingrese su apellido\" },\n      { type: \"minlength\", message: \"Este apellido no es válido\" }\n    ],\n    direccion: [\n      { type: \"required\", message: \"Por favor ingrese su dirección\" },\n      { type: \"minlength\", message: \"Esta dirección no es válida\" }\n    ],\n    telefono: [\n      { type: \"required\", message: \"Por favor ingrese su teléfono\" },\n      { type: \"minlength\", message: \"Este teléfono no es válido\" }\n    ],\n    password: [\n      { type: \"required\", message: \"Por favor ingrese su contraseña\" },\n      { type: \"minlength\", message: \"Esta contraseña no es válida\" }\n    ]\n  }\n\n  constructor(public formbuider: FormBuilder, public servicios: UsuarioService, public navCtrl: NavController, public herramientasUI: HerramientasUIService, private storage:Storage, private crudContactosService: CrudContactosService, private http:HttpClient) {\n    this.cargarIdUsuario();\n   }\n\n  async registrar(datosRegistro) {\n    console.log(\"Estoy logeado\");\n    console.log(datosRegistro);\n    console.log(\"Correo:\" + datosRegistro.correo);\n    console.log(\"Password:\" + datosRegistro.password);\n\n    //Llama el Servicio y envía el Usuario y Password\n    const valido = await this.servicios.registrar(datosRegistro.correo, datosRegistro.cedula, datosRegistro.nombres, datosRegistro.apellidos, datosRegistro.direccion, datosRegistro.telefono, datosRegistro.password, datosRegistro.password2);\n\n    if (valido) {\n      //Pagina que se muestra cuando el login es OK\n      this.navCtrl.navigateRoot('/informacion', { animated: true });\n    }\n    else {\n      //Lo que hace si el usuario no es correcto\n      console.log(\"Usuario Ya registrado\");\n      this.herramientasUI.mostrarAlerta(\"Ya registrado\", \"Ya existe un usuario con ese número de cédula registrado.\");\n    }\n\n  }\n\n  async actualizar(datosRegistro) {\n\n    console.log(\"Datos de registro...\");\n    console.log(\"Datos de registro id_usuario...\"+datosRegistro.id_usuario);\n    console.log(datosRegistro);\n\n    //Llama el Servicio y envía el Usuario y Password\n    this.id_usuario = await this.crudContactosService.cargarIdUsuario2();\n    const valido = await this.crudContactosService.actualizar(datosRegistro.correo, datosRegistro.cedula, datosRegistro.nombres, datosRegistro.apellidos, datosRegistro.direccion, datosRegistro.telefono, datosRegistro.password, this.id_usuario);\n\n    if (valido) {\n      //Pagina que se muestra cuando el login es OK\n      this.herramientasUI.mostrarAlerta(\"Registro Actualizado\", \"Los cambios fueron guardados\");\n      this.navCtrl.navigateRoot('/panico', { animated: true });\n    }\n    else {\n      //Lo que hace si el usuario no es correcto\n      console.log(\"Usuario Ya registrado\");\n      this.herramientasUI.mostrarAlerta(\"Ya registrado\", \"Ya existe un usuario con ese número de cédula registrado.\");\n    }\n\n  }\n\n  async cargarDatosUsuario(id_usuario){\n    //Carga los datos del usuarios desde el servicio REST\n    this.datosCargarUsuario =  await this.servicios.cargar(id_usuario);\n    console.log(\"Datos Cargados EditarPerfil\");\n    console.log(this.datosCargarUsuario);\n  }\n\n\n  async cargarIdUsuario(){ \n    this.id_usuario = await this.crudContactosService.cargarIdUsuario2();\n    console.log(\"Editar Perfil:\"+this.id_usuario);\n    const data = { id_usuario:this.id_usuario }\n    const URL: string = urlService+'cargarUsuario.php';\n    return new Promise(resolve => {\n      this.http.post(URL, data)\n        .subscribe(async resp => {\n          console.log(\"Respuesta Servidor \" + JSON.stringify(resp));\n            console.log('Cargado Usuario Exitosamente');\n            this.datosRegistro.cedula = resp[0].cedula;            \n            this.datosRegistro.nombres = resp[0].nombre;            \n            this.datosRegistro.apellidos = resp[0].apellido;            \n            this.datosRegistro.telefono = resp[0].telefono;            \n            this.datosRegistro.direccion = resp[0].direccion;            \n            this.datosRegistro.correo = resp[0].correo;            \n            this.datosRegistro.password = resp[0].password;   \n            this.datosRegistro.id_usuario = this.id_usuario;\n            console.log(\"editarPerfil:cargarIdUsuario -> id_usuario asignado: \"+this.id_usuario);\n            console.log(\"editarPerfil:cargarIdUsuario -> datosRegistro.id_usuario asignado: \"+this.datosRegistro.id_usuario);\n            resolve(true);\n                    \n        });\n    });\n\n\n\n    /*this.id_usuario = await this.crudContactosService.cargarIdUsuario2().subscribe(\n      respuesta => {\n      this.id_usuario = respuesta;\n    });*/\n\n  }\n\n  //Sin promesa\n  /*\n  async cargarIdUsuario() {\n    //carga el ID del usuario desde el Storage del Usuario\n    const storage = await this.storage.create();\n    this._storage = storage;\n    this.id_usuario = await this._storage.get('id_usuario');\n    console.log(\"cargarUsuario (EditarPerfil) - fk_id_usuario 1...\" + this.id_usuario);\n  }*/\n\n  ngOnInit() {\n\n    //Cargar la información del usuario mediante un GET\n    //console.log(\"editarPerfil: Se llama a CargarUsuario con id:\"+this.id_usuario);\n    //this.cargarDatosUsuario(this.id_usuario);\n\n    this.validador = this.formbuider.group({\n      correo: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.pattern('^[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+.[a-zA-Z0-9-.]+$')\n      ])),\n      cedula: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(6)\n      ])),\n      nombres: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(5)\n      ])),\n      apellidos: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(5)\n      ])),\n      direccion: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(5)\n      ])),\n      telefono: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(5)\n      ])),\n      password: new FormControl('', Validators.compose([\n        Validators.required,\n        Validators.minLength(5)\n      ]))\n    })\n\n  }\n}"],"names":["Component","FormBuilder","Validators","FormControl","NavController","UsuarioService","HerramientasUIService","Storage","CrudContactosService","HttpClient","environment","urlService","urlServices","EditarperfilPage","constructor","formbuider","servicios","navCtrl","herramientasUI","storage","crudContactosService","http","correo","cedula","nombres","apellidos","direccion","telefono","password","password2","id_usuario","type","message","cargarIdUsuario","registrar","datosRegistro","console","log","valido","navigateRoot","animated","mostrarAlerta","actualizar","cargarIdUsuario2","cargarDatosUsuario","datosCargarUsuario","cargar","data","URL","Promise","resolve","post","subscribe","resp","JSON","stringify","nombre","apellido","ngOnInit","validador","group","compose","required","pattern","minLength","selector","template"],"sourceRoot":"webpack:///"}